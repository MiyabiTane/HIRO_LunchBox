#!/usr/bin/env roseus

(ros::roseus "test")

;;Rostopic
(ros::load-ros-package "jsk_recognition_msgs")
(setq *camera-frame* "head_camera_rgb_optical_frame")
(ros::advertise "/coral_rects_info" jsk_recognition_msgs::RectArray 1)
(setq *pub-topic* "/xyz_to_screenpoint/input")
(ros::advertise *pub-topic* geometry_msgs::PointStamped 1)
(setq *pub-center-topic* "/screenpoint_to_xyz/input")
(ros::advertise *pub-center-topic* geometry_msgs::PointStamped 1)
(setq *pub-lby-topic* "/lunchbox_2D_y")
(ros::advertise *pub-lby-topic* std_msgs::Float32 1)
(ros::rate 1)

;;keep info
(setq name_list '())
(setq pos_list '())
(setq box_list '())
(setq lbox_length nil)
(setq radi_list '())

;;init
(setq pub_msg (instance geometry_msgs::PointStamped :init))
(setq pub_center_msg (instance geometry_msgs::PointStamped :init))

;;use tf
(unless (boundp '*tfl*)
  (setq *tfl* (instance ros::transform-listener :init)))

;;use xyz_to_screenpoint
(defun publish-3Dcoords (x y z)
  (setq coords (make-coords :pos (float-vector x y z)))
  (setq pub-coords (send (send *tfl* :lookup-transform "head_camera_rgb_optical_frame" "WAIST" (ros::time 0))
  			 :transform coords))
  (setq pub-pos (send pub-coords :pos))
  (send (send pub_msg :point) :x (elt pub-pos 0))
  (send (send pub_msg :point) :y (elt pub-pos 1))
  (send (send pub_msg :point) :z (elt pub-pos 2))
  )

;;use screenpoint_to_xyz
(defun screenpoint->world (msg)
  ;;ros::tf-point->coords *camera-frame*座標を"WAIST"座標に変換
  (let* ((waist-to-camera (send *tfl* :lookup-transform "WAIST" "head_camera_rgb_optical_frame" (ros::time 0)))
	 (coords (make-coords :pos (ros::tf-point->pos (send msg :point)))))
    (send coords :transform waist-to-camera :world)
    (format t "food coords ~A~%" (send coords :pos))
    (setq *food-pos* (send coords :pos))
    *food-pos*))

(defun screen_point_cb (msg)
  (setq food-pos (screenpoint->world msg))
  (format t "food-pos: ~A~%" food-pos)
  (setq flag nil))

(defun rects_to_xyz (rects)
  (dotimes (i (length rects))
    (setq rect (elt rects i))
    (setq pub_msg (instance geometry_msgs::Pointstamped :init))
    (send (send pub_msg :point) :x (send rect :x))
    (send (send pub_msg :point) :y (send rect :y))
    (send (send pub_msg :point) :z 0)
    (setq flag t)
    (ros::subscribe "/pointcloud_screenpoint_nodelet/output_point" geometry_msgs::PointStamped #'screen_point_cb)
    (while flag
      (ros::publish "/head_camera/rgb/image_rect_color/screenpoint" pub_msg))
    (ros::unsubscribe "/pointcloud_screenpoint_nodelet/output_point"))
  )
    
;;ほぼ同じtimeStampedの情報を取ってくる
(defun get_box_cb (msg)
  (setq box_msg msg)
  (format t "Called box~%")
  ;;(format t "box list ~A~%" b_cb_lst)
  )

(defun get_name_cb (msg)
  (setq name_msg msg)
  ;;(format t "name list ~A~%" n_cb_lst)
  (format t "Called name~%")
  )

(defun get_rects_cb (msg)
  (setq rect_msg msg)
  (format t "Called rects ~%")
  )

(defun imgpro_cb (msg)
  (setq got_rects_list (send msg :lines))
  (format t "Called imgpro result~%")
  )

(defun pub_sub_rects (pub_msg)
  (format t "start image processing~%")
  (setq got_rects_list '())
  (setq pub_rects_msg (instance jsk_recognition_msgs::RectArray :init))
  (dotimes (i (length (send pub_msg :rects)))
    (setq got_rect (elt (send pub_msg :rects) i))
    (setq r_msg (instance jsk_recognition_msgs::Rect :init))
    (send r_msg :x (send got_rect :x))
    (send r_msg :y (send got_rect :y))
    (send r_msg :width (send got_rect :width))
    (send r_msg :height (send got_rect :height))
    (send pub_rects_msg :rects (append (send pub_rects_msg :rects) (list r_msg)))
    )
  (setq pub_lby_msg (instance std_msgs::Float32 :init))
  (send pub_lby_msg :data (elt lbox-center 1))
  (ros::subscribe "/result_of_imageprocessing" jsk_recognition_msgs::LineArray #'imgpro_cb)
  (until got_rects_list
	 (ros::publish "/coral_rects_info" pub_rects_msg)
	 (ros::publish "/lunchbox_2D_y" pub_lby_msg)
	 (ros::spin-once)
	 (ros::sleep)
	 )
  (ros::unsubscribe "/result_of_imageprocessing")
  )

(defun sync_info ()
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_00" jsk_recognition_msgs::ClassificationResult #'get_name_cb)
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_01" jsk_recognition_msgs::BoundingBoxArray #'get_box_cb)
  (ros::subscribe "/edgetpu_boxes_synchronizer/pub_02" jsk_recognition_msgs::RectArray #'get_rects_cb)
  (while (not (and (and rect_msg box_msg) name_msg))
    (ros::spin-once)
    (ros::sleep)
    )
  (setq b_time (send (send (send box_msg :header) :stamp) :sec-nsec))
  (setq c_time (send (send (send name_msg :header) :stamp) :sec-nsec))
  (setq r_time (send (send (send rect_msg :header) :stamp) :sec-nsec))
  (format t "b_time ~A~%" b_time)
  (format t "c_time ~A~%" c_time)
  (format t "r_time ~A~%" r_time)
  (if (and (and (and (= (elt b_time 0) (elt c_time 0)) (= (elt b_time 0) (elt r_time 0)))
		(and (< (abs (- (elt b_time 1) (elt c_time 1))) 1000)
		     (< (abs (- (elt b_time 1) (elt r_time 1))) 1000)))
	   (= (length (send name_msg :label_names)) (length (send box_msg :boxes))))
      (progn
	(format t "GET INFO~%")
	(ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_00")
	(ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_01")
	(ros::unsubscribe "/edgetpu_boxes_synchronizer/pub_02")
	(pub_sub_rects rect_msg))
    (progn
      (setq name_msg nil)
      (setq rect_msg nil)
      (setq box_msg nil)
      (sync_info))
    )
  )

(defun near_box_cb (msg)
  (setq box_2D_pos (float-vector (send (send msg :point) :x) (send (send msg :point) :y)))
  ;;(format t "box_2D_pos ~A~%" box_2D_pos)
  (setq min_dis 100000)
  (dotimes (i (length rects))
    (setq rect_ (elt rects i))
    (setq rect_pos (float-vector (+ (send rect_ :x) (/ (send rect_ :width) 2)) (+ (send rect_ :y) (/ (send rect_ :height) 2))))
    ;;(format t "rect_pos ~A~%" rect_pos)
    (setq dis (norm (v- box_2D_pos rect_pos)))
    (when (< dis min_dis)
      (setq min_dis dis)
      (setq near_num i))
    )
  (format t "dis near_num ~A ~A~%" min_dis near_num)
  (if (> min_dis 12) ;;やり直し
      (progn
	(format t "try again~%")
	(setq again_flag t)
	(setq catch-flag t))
    (progn
      (setq pos_list (substitute bpos (elt pos_list near_num) pos_list))
      (setq size_list (substitute bsize (elt size_list near_num) size_list))
      (setq catch-flag t)))
  )

(defun get_food_pos (rects bpos_list bsize_list)
  (setq pos_list '())
  (setq size_list '())
  (dotimes (i (length bpos_list)) 
    (setq pos_list (append pos_list (list i)))
    (setq size_list (append size_list (list i)))) ;;init pos_list
  (dotimes (i (length bpos_list))
    (setq bpos (elt bpos_list i))
    (setq bsize (elt bsize_list i))
    (publish-3Dcoords (elt bpos 0) (elt bpos 1) (elt bpos 2))
    (setq catch-flag nil)
    (ros::subscribe "/xyz_to_screenpoint/output" geometry_msgs::PointStamped #'near_box_cb)
    (until catch-flag
	   (ros::publish *pub-topic* pub_msg)
	   (ros::spin-once)
	   (ros::sleep))
    )
  (ros::unsubscribe "/xyz_to_screenpoint/output")
  )

(defun get_list ()
  ;;結果を格納していく
  (setq name_list (send name_msg :label_names))
  ;;box情報の並べ替え
  (setq bpos_list '())
  (setq bsize_list '())
  (setq boxes (send box_msg :boxes))
  (dotimes (i (length boxes))
    (setq bbox (elt boxes i))
    (setq cascoords (send (send *tfl* :lookup-transform "WAIST" (send bbox :header :frame_id) (ros::time 0))
			  :transform (ros::tf-pose->coords (send bbox :pose))))
    (setq coords (send cascoords :worldpos))
    (setq size (ros::tf-point->pos (send bbox :dimensions)))
    (setq bpos_list (list-insert coords (length bpos_list) bpos_list))
    (setq bsize_list (list-insert size (length bsize_list) bsize_list))
    )
  (format t "original box info~%")
  (dotimes (i (length boxes))
    (format t "pos: ~A, size: ~A~%" (elt bpos_list i) (elt bsize_list i)))
  (setq rects (send rect_msg :rects))
  (get_food_pos rects bpos_list bsize_list)
  (dotimes (i (length size_list))
    (if (eql (elt size_list i) i)
	(setq again_flag t)))
  (if again_flag
      (main_loop)
    (progn
      (dotimes (i (length name_list))
	;;got_rects_listにRGB画像中のおかずの縦横の大きさが格納されている
	;;おかずの縦横の大きさは画像処理の結果を使う
	(setq rect (elt got_rects_list i))
	(setq size (elt size_list i))
	(format t "- - - ~A - - -~%" (elt name_list i))
	(format t "coords, size ~A ~A~%" (elt pos_list i) size)
	(format t "degree, width, height ~A ~A ~A~%" (rad2deg (send rect :x1)) (send rect :x2) (send rect :y2))
	(if (not (= (send rect :x2) 0))
	    (progn
	      (setq width_ (* (/ (send rect :x2) lbox_length) *length*))
	      (setq height_ (* (/ (send rect :y2) lbox_length) *length*))
	      (setq radi (send rect :x1)))
	  (progn
	    (format t "result not found~%")
	    (setq radi 0)
	    (setq width_ (elt size 0))
	    (setq height_ (elt size 1)))
	  )
	(setq food-size (list width_ height_ (elt size 2)))
	(setq box_list (list-insert food-size (length box_list) box_list))
	(setq radi_list (append radi_list (list radi)))
	))
    )
  (rects_to_xyz rects)
  )

(defun main_loop ()
  (format t "main loop~%")
  (setq again_flag nil)
  (setq box_msg nil)
  (setq name_msg nil)
  (setq rect_msg nil)
  (sync_info)
  (get_list)
  )

(defun get_foods_info_main ()
  (format t "- - - GET FOODS INFO - - -~%")
  ;;(move_hand_out_of_camera)
  ;;(get-lbox-coords)
  (format t "lbox_length ~A~%" lbox_length)
  (main_loop)
  )

(get_foods_info_main)
